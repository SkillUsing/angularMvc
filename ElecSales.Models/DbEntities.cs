// <auto-generated>
// ReSharper disable RedundantUsingDirective
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable RedundantNameQualifier
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data.Entity;
using System.Data;
using System.Data.Entity.Core.Objects;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Data.Entity.ModelConfiguration;
using System.Threading;
using DatabaseGeneratedOption = System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption;

namespace ElecSales.Models
{
    public partial class DbEntities : DbContext, IDbEntities
    {
        public DbSet<AccountClaims> AccountClaims { get; set; } // AccountClaims
        public DbSet<AccountForRole> AccountForRole { get; set; } // AccountForRole
        public DbSet<AccountLoginRelation> AccountLoginRelation { get; set; } // AccountLoginRelation
        public DbSet<AccountRoles> AccountRoles { get; set; } // AccountRoles
        public DbSet<Accounts> Accounts { get; set; } // Accounts
        public DbSet<Adl100> Adl100 { get; set; } // ADL100
        public DbSet<Adl300> Adl300 { get; set; } // ADL300
        public DbSet<Adl3000> Adl3000 { get; set; } // ADL3000
        public DbSet<Agents> Agents { get; set; } // Agents
        public DbSet<AgentsLog> AgentsLog { get; set; } // AgentsLog
        public DbSet<AllEnum> AllEnum { get; set; } // AllEnum
        public DbSet<Brokerage> Brokerage { get; set; } // Brokerage
        public DbSet<BrokerageLog> BrokerageLog { get; set; } // BrokerageLog
        public DbSet<ContractTemplate> ContractTemplate { get; set; } // ContractTemplate
        public DbSet<ContractTemplateLog> ContractTemplateLog { get; set; } // ContractTemplateLog
        public DbSet<ElectricityCompetitivePrice> ElectricityCompetitivePrice { get; set; } // ElectricityCompetitivePrice
        public DbSet<ElectricityCompetitivePriceLog> ElectricityCompetitivePriceLog { get; set; } // ElectricityCompetitivePriceLog
        public DbSet<ElectricityContract> ElectricityContract { get; set; } // ElectricityContract
        public DbSet<ElectricityContractCycle> ElectricityContractCycle { get; set; } // ElectricityContractCycle
        public DbSet<ElectricityContractLog> ElectricityContractLog { get; set; } // ElectricityContractLog
        public DbSet<ElectricityFactory> ElectricityFactory { get; set; } // ElectricityFactory
        public DbSet<ElectricityFactoryLog> ElectricityFactoryLog { get; set; } // ElectricityFactoryLog
        public DbSet<EnterpriseInfo> EnterpriseInfo { get; set; } // EnterpriseInfo
        public DbSet<EnterpriseInfoAttachment> EnterpriseInfoAttachment { get; set; } // EnterpriseInfoAttachment
        public DbSet<EnterpriseLog> EnterpriseLog { get; set; } // EnterpriseLog
        public DbSet<Privileges> Privileges { get; set; } // Privileges
        public DbSet<Project> Project { get; set; } // Project
        public DbSet<ProjectEnumPrivileges> ProjectEnumPrivileges { get; set; } // ProjectEnumPrivileges
        public DbSet<ProjectLog> ProjectLog { get; set; } // ProjectLog
        public DbSet<ProjectRole> ProjectRole { get; set; } // ProjectRole
        public DbSet<ProjectRoleEnum> ProjectRoleEnum { get; set; } // ProjectRoleEnum
        public DbSet<RoleForPrivileges> RoleForPrivileges { get; set; } // RoleForPrivileges
        public DbSet<SaleElectricityLog> SaleElectricityLog { get; set; } // SaleElectricityLog
        public DbSet<SalesElectricity> SalesElectricity { get; set; } // SalesElectricity
        public DbSet<SalesElectricityCycle> SalesElectricityCycle { get; set; } // SalesElectricityCycle
        public DbSet<TransactionCategory> TransactionCategory { get; set; } // TransactionCategory
        
        static DbEntities()
        {
            System.Data.Entity.Database.SetInitializer<DbEntities>(null);
        }

        public DbEntities()
            : base("Name=DefaultConnection")
        {
            InitializePartial();
        }

        public DbEntities(string connectionString) : base(connectionString)
        {
            InitializePartial();
        }

        public DbEntities(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model) : base(connectionString, model)
        {
            InitializePartial();
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == DBNull.Value);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AccountClaimsConfiguration());
            modelBuilder.Configurations.Add(new AccountForRoleConfiguration());
            modelBuilder.Configurations.Add(new AccountLoginRelationConfiguration());
            modelBuilder.Configurations.Add(new AccountRolesConfiguration());
            modelBuilder.Configurations.Add(new AccountsConfiguration());
            modelBuilder.Configurations.Add(new Adl100Configuration());
            modelBuilder.Configurations.Add(new Adl300Configuration());
            modelBuilder.Configurations.Add(new Adl3000Configuration());
            modelBuilder.Configurations.Add(new AgentsConfiguration());
            modelBuilder.Configurations.Add(new AgentsLogConfiguration());
            modelBuilder.Configurations.Add(new AllEnumConfiguration());
            modelBuilder.Configurations.Add(new BrokerageConfiguration());
            modelBuilder.Configurations.Add(new BrokerageLogConfiguration());
            modelBuilder.Configurations.Add(new ContractTemplateConfiguration());
            modelBuilder.Configurations.Add(new ContractTemplateLogConfiguration());
            modelBuilder.Configurations.Add(new ElectricityCompetitivePriceConfiguration());
            modelBuilder.Configurations.Add(new ElectricityCompetitivePriceLogConfiguration());
            modelBuilder.Configurations.Add(new ElectricityContractConfiguration());
            modelBuilder.Configurations.Add(new ElectricityContractCycleConfiguration());
            modelBuilder.Configurations.Add(new ElectricityContractLogConfiguration());
            modelBuilder.Configurations.Add(new ElectricityFactoryConfiguration());
            modelBuilder.Configurations.Add(new ElectricityFactoryLogConfiguration());
            modelBuilder.Configurations.Add(new EnterpriseInfoConfiguration());
            modelBuilder.Configurations.Add(new EnterpriseInfoAttachmentConfiguration());
            modelBuilder.Configurations.Add(new EnterpriseLogConfiguration());
            modelBuilder.Configurations.Add(new PrivilegesConfiguration());
            modelBuilder.Configurations.Add(new ProjectConfiguration());
            modelBuilder.Configurations.Add(new ProjectEnumPrivilegesConfiguration());
            modelBuilder.Configurations.Add(new ProjectLogConfiguration());
            modelBuilder.Configurations.Add(new ProjectRoleConfiguration());
            modelBuilder.Configurations.Add(new ProjectRoleEnumConfiguration());
            modelBuilder.Configurations.Add(new RoleForPrivilegesConfiguration());
            modelBuilder.Configurations.Add(new SaleElectricityLogConfiguration());
            modelBuilder.Configurations.Add(new SalesElectricityConfiguration());
            modelBuilder.Configurations.Add(new SalesElectricityCycleConfiguration());
            modelBuilder.Configurations.Add(new TransactionCategoryConfiguration());

            OnModelCreatingPartial(modelBuilder);
        }

        public static DbModelBuilder CreateModel(DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AccountClaimsConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountForRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountLoginRelationConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountRolesConfiguration(schema));
            modelBuilder.Configurations.Add(new AccountsConfiguration(schema));
            modelBuilder.Configurations.Add(new Adl100Configuration(schema));
            modelBuilder.Configurations.Add(new Adl300Configuration(schema));
            modelBuilder.Configurations.Add(new Adl3000Configuration(schema));
            modelBuilder.Configurations.Add(new AgentsConfiguration(schema));
            modelBuilder.Configurations.Add(new AgentsLogConfiguration(schema));
            modelBuilder.Configurations.Add(new AllEnumConfiguration(schema));
            modelBuilder.Configurations.Add(new BrokerageConfiguration(schema));
            modelBuilder.Configurations.Add(new BrokerageLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ContractTemplateConfiguration(schema));
            modelBuilder.Configurations.Add(new ContractTemplateLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityCompetitivePriceConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityCompetitivePriceLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityContractConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityContractCycleConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityContractLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityFactoryConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectricityFactoryLogConfiguration(schema));
            modelBuilder.Configurations.Add(new EnterpriseInfoConfiguration(schema));
            modelBuilder.Configurations.Add(new EnterpriseInfoAttachmentConfiguration(schema));
            modelBuilder.Configurations.Add(new EnterpriseLogConfiguration(schema));
            modelBuilder.Configurations.Add(new PrivilegesConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectEnumPrivilegesConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectLogConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectRoleConfiguration(schema));
            modelBuilder.Configurations.Add(new ProjectRoleEnumConfiguration(schema));
            modelBuilder.Configurations.Add(new RoleForPrivilegesConfiguration(schema));
            modelBuilder.Configurations.Add(new SaleElectricityLogConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesElectricityConfiguration(schema));
            modelBuilder.Configurations.Add(new SalesElectricityCycleConfiguration(schema));
            modelBuilder.Configurations.Add(new TransactionCategoryConfiguration(schema));
            return modelBuilder;
        }

        partial void InitializePartial();
        partial void OnModelCreatingPartial(DbModelBuilder modelBuilder);
        
        // Stored Procedures
    }
}
// </auto-generated>
